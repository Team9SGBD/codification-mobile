"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _defaultRules = require("./defaultRules");

var _defaultRules2 = _interopRequireDefault(_defaultRules);

var _defaultMessages = require("./defaultMessages");

var _defaultMessages2 = _interopRequireDefault(_defaultMessages);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ValidationComponent = function (_Component) {
  _inherits(ValidationComponent, _Component);

  function ValidationComponent(props) {
    _classCallCheck(this, ValidationComponent);

    var _this = _possibleConstructorReturn(this, (ValidationComponent.__proto__ || Object.getPrototypeOf(ValidationComponent)).call(this, props));

    _this.errors = [];

    _this.deviceLocale = props.deviceLocale || "fr";
    _this.rules = props.rules || _defaultRules2.default;
    _this.messages = props.messages || _defaultMessages2.default;
    return _this;
  }

  _createClass(ValidationComponent, [{
    key: "validate",
    value: function validate(fields) {
      this._resetErrors();

      for (var _iterator = Object.keys(this.state), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var key = _ref;

        var rules = fields[key];
        if (rules) {
          this._checkRules(key, rules, this.state[key]);
        }
      }
      return this.isFormValid();
    }
  }, {
    key: "_checkRules",
    value: function _checkRules(fieldName, rules, value) {
      for (var _iterator2 = Object.keys(rules), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var key = _ref2;

        var isRuleFn = typeof this.rules[key] == "function";
        var isRegExp = this.rules[key] instanceof RegExp;
        if (isRuleFn && !this.rules[key](rules[key], value) || isRegExp && !this.rules[key].test(value)) {
          this._addError(fieldName, key, rules[key], isRuleFn);
        }
      }
    }
  }, {
    key: "_addError",
    value: function _addError(fieldName, rule, value, isFn) {
      var errMsg = this.messages[this.deviceLocale][rule].replace("{0}", fieldName).replace("{1}", value);

      var _errors$filter = this.errors.filter(function (err) {
        return err.fieldName === fieldName;
      }),
          _errors$filter2 = _slicedToArray(_errors$filter, 1),
          error = _errors$filter2[0];

      if (error) {
        var index = this.errors.indexOf(error);
        error.messages.push(errMsg);
        this.errors[index] = error;
      } else {
        this.errors.push({
          fieldName: fieldName,
          messages: [errMsg]
        });
      }
    }
  }, {
    key: "_resetErrors",
    value: function _resetErrors() {
      this.errors = [];
    }
  }, {
    key: "isFieldInError",
    value: function isFieldInError(fieldName) {
      return this.errors.filter(function (err) {
        return err.fieldName === fieldName;
      }).length > 0;
    }
  }, {
    key: "isFormValid",
    value: function isFormValid() {
      return this.errors.length == 0;
    }
  }, {
    key: "getErrorMessages",
    value: function getErrorMessages() {
      var separator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "\n";

      return this.errors.map(function (err) {
        return err.messages.join(separator);
      }).join(separator);
    }
  }, {
    key: "getErrorsInField",
    value: function getErrorsInField(fieldName) {
      var foundError = this.errors.find(function (err) {
        return err.fieldName === fieldName;
      });
      if (!foundError) {
        return [];
      }
      return foundError.messages;
    }
  }]);

  return ValidationComponent;
}(_react.Component);

exports.default = ValidationComponent;

ValidationComponent.propTypes = {
  deviceLocale: _propTypes2.default.string,
  rules: _propTypes2.default.object,
  messages: _propTypes2.default.object };