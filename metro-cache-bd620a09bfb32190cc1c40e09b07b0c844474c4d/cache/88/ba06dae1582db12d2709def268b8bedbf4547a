__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = require(_dependencyMap[1], "./../../node_modules/react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/Users/Papi/Documents/dev/React Native/codification/components/app/Settings.js";

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _Style = require(_dependencyMap[3], "../../Style");

  var _Style2 = _interopRequireDefault(_Style);

  var _reactNativeSettingsList = require(_dependencyMap[4], "react-native-settings-list");

  var _reactNativeSettingsList2 = _interopRequireDefault(_reactNativeSettingsList);

  var _reactNavigation = require(_dependencyMap[5], "react-navigation");

  var _UpdateMail = require(_dependencyMap[6], "./UpdateMail");

  var _UpdateMail2 = _interopRequireDefault(_UpdateMail);

  var _UpdatePwd = require(_dependencyMap[7], "./UpdatePwd");

  var _UpdatePwd2 = _interopRequireDefault(_UpdatePwd);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Settings: {
      displayName: "Settings"
    }
  };

  var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/Papi/Documents/dev/React Native/codification/components/app/Settings.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var Settings = _wrapComponent("Settings")((_temp = _class = function (_React$Component) {
    _inherits(Settings, _React$Component);

    function Settings(props) {
      _classCallCheck(this, Settings);

      return _possibleConstructorReturn(this, (Settings.__proto__ || Object.getPrototypeOf(Settings)).call(this, props));
    }

    _createClass(Settings, [{
      key: "updateMail",
      value: function updateMail() {
        _reactNative.Keyboard.dismiss();

        this.props.navigation.navigate("UpdateMail");
      }
    }, {
      key: "updatePwd",
      value: function updatePwd() {
        _reactNative.Keyboard.dismiss();

        this.props.navigation.navigate("UpdatePwd");
      }
    }, {
      key: "logout",
      value: function logout() {
        console.log("Deconnexion");
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react3.default.createElement(
          _reactNative.View,
          {
            style: {
              backgroundColor: "#f6f6f6",
              flex: 1
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 36
            }
          },
          _react3.default.createElement(
            _reactNative.View,
            {
              style: {
                backgroundColor: "#f6f6f6",
                flex: 1
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 37
              }
            },
            _react3.default.createElement(
              _reactNativeSettingsList2.default,
              {
                borderColor: _Style2.default.color,
                defaultItemSize: 50,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 38
                }
              },
              _react3.default.createElement(_reactNativeSettingsList2.default.Item, {
                icon: _react3.default.createElement(
                  _reactNative.View,
                  {
                    style: styles.imageStyle,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 41
                    }
                  },
                  _react3.default.createElement(_reactNative.Image, {
                    style: {
                      alignSelf: "center",
                      height: 22,
                      width: 22
                    },
                    source: require(_dependencyMap[8], "./icons/account.png"),
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 42
                    }
                  })
                ),
                hasNavArrow: false,
                itemWidth: 70,
                titleStyle: {
                  color: "black",
                  fontSize: 16
                },
                title: "Modifier email",
                onPress: function onPress() {
                  return _this2.updateMail();
                },
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 39
                }
              }),
              _react3.default.createElement(_reactNativeSettingsList2.default.Item, {
                icon: _react3.default.createElement(
                  _reactNative.View,
                  {
                    style: styles.imageStyle,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 56
                    }
                  },
                  _react3.default.createElement(_reactNative.Image, {
                    style: {
                      alignSelf: "center",
                      height: 22,
                      width: 22
                    },
                    source: require(_dependencyMap[9], "./icons/lock.png"),
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 57
                    }
                  })
                ),
                hasNavArrow: false,
                itemWidth: 70,
                titleStyle: {
                  color: "black",
                  fontSize: 16
                },
                title: "Modifier mot de passe",
                onPress: function onPress() {
                  return _this2.updatePwd();
                },
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 54
                }
              }),
              _react3.default.createElement(_reactNativeSettingsList2.default.Item, {
                icon: _react3.default.createElement(
                  _reactNative.View,
                  {
                    style: styles.imageStyle,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 71
                    }
                  },
                  _react3.default.createElement(_reactNative.Image, {
                    style: {
                      alignSelf: "center",
                      height: 22,
                      width: 18
                    },
                    source: require(_dependencyMap[10], "./icons/exit.png"),
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 72
                    }
                  })
                ),
                title: "D\xE9connexion",
                itemWidth: 70,
                titleStyle: {
                  color: "black",
                  fontSize: 16
                },
                hasNavArrow: false,
                onPress: this.logout,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 69
                }
              })
            )
          )
        );
      }
    }]);

    return Settings;
  }(_react3.default.Component), _class.navigationOptions = {
    title: "Parametres",
    tabBarIcon: function tabBarIcon() {
      return _react3.default.createElement(_reactNative.Image, {
        source: require(_dependencyMap[11], "./icons/settings.png"),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 16
        }
      });
    }
  }, _temp));

  var styles = _reactNative.StyleSheet.create({
    imageStyle: {
      marginLeft: 15,
      marginRight: 20,
      alignSelf: "center",
      width: 20,
      height: 24,
      justifyContent: "center"
    }
  });

  var navigationOptions = {
    headerStyle: _Style2.default.header,
    headerTitleStyle: _Style2.default.headerTitle
  };
  exports.default = (0, _reactNavigation.StackNavigator)({
    Settings: {
      screen: Settings,
      navigationOptions: navigationOptions
    },
    UpdateMail: {
      screen: _UpdateMail2.default,
      navigationOptions: navigationOptions
    },
    UpdatePwd: {
      screen: _UpdatePwd2.default,
      navigationOptions: navigationOptions
    }
  });
});